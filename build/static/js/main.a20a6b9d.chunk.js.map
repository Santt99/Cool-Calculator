{"version":3,"sources":["components/layout/Navbar.js","components/Button.js","components/Screen.js","components/Calculator.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","React","Component","Buttton","type","name","onClick","this","props","parentOnClick","value","Screen","id","readOnly","required","Calculator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","buttons","state","history","operation","currentOperation","length","setState","concat","pop","console","error","Axios","get","UrlEncode","response","setOperation","data","log","_context","t0","getResult","_this2","map","current","index","Button","key","handleOnClick","components_Screen","renderButtons","App","layout_Navbar","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a20a6b9d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"navbar-fixed\">\r\n        <nav className=\"#4a148c purple darken-4\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"nav-wrapper center col s12\">\r\n                <a href=\"#!\" className=\"brand-logo center col s12 \">\r\n                  Cool Calculator\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nclass Buttton extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"col s3\">\r\n        <button\r\n          className=\"btn waves-effect waves-light purple darken-4 calcButtons\"\r\n          type=\"submit\"\r\n          name=\"action\"\r\n          onClick={this.props.parentOnClick}\r\n        >\r\n          {this.props.value}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttton;\r\n","import React from \"react\";\r\n\r\nclass Screen extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          id=\"last_name\"\r\n          type=\"text\"\r\n          className=\"validate\"\r\n          value={this.props.value}\r\n          readOnly\r\n          required\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport Screen from \"./Screen\";\r\nimport Axios from \"axios\";\r\nimport UrlEncode from \"urlencode\";\r\nclass Calculator extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.buttons = [\r\n      { value: \"0\" },\r\n      { value: \"1\" },\r\n      { value: \"2\" },\r\n      { value: \"3\" },\r\n      { value: \"4\" },\r\n      { value: \"5\" },\r\n      { value: \"6\" },\r\n      { value: \"7\" },\r\n      { value: \"8\" },\r\n      { value: \"9\" },\r\n      { value: \"+\" },\r\n      { value: \"-\" },\r\n      { value: \"*\" },\r\n      { value: \"/\" },\r\n      { value: \"<==\" },\r\n      { value: \"=\" }\r\n    ];\r\n    this.state = { history: [{ operation: \"\" }] };\r\n  }\r\n  setOperation(value, type) {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const currentOperation = current.operation;\r\n    if (type === \"update\") {\r\n      this.setState({\r\n        history: history.concat({ operation: currentOperation + value })\r\n      });\r\n    } else if (type === \"delete\") {\r\n      if (history.length > 1) {\r\n        history.pop();\r\n        this.setState({\r\n          history: history\r\n        });\r\n      } else {\r\n        this.setState({\r\n          history: [{ operation: \"\" }]\r\n        });\r\n      }\r\n    } else if (type === \"replace\") {\r\n      this.setState({\r\n        history: history.concat({ operation: value })\r\n      });\r\n    } else {\r\n      console.error(\r\n        \"Plis use one of the 3 options we have! - delete - update - replace\"\r\n      );\r\n    }\r\n  }\r\n\r\n  async getResult() {\r\n    try {\r\n      const response = await Axios.get(\r\n        `http://api.mathjs.org/v4/?expr=${UrlEncode(\r\n          this.state.history[this.state.history.length - 1].operation,\r\n          \"gbk\"\r\n        )}`\r\n      );\r\n      this.setOperation(response.data, \"replace\");\r\n      console.log(response);\r\n    } catch (error) {\r\n      this.setOperation(\"ERROR\");\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  handleOnClick(value) {\r\n    if (value === \"<==\") {\r\n      this.setOperation(null, \"delete\");\r\n      console.log(\"Delete!\");\r\n    } else if (value === \"=\") {\r\n      this.getResult();\r\n    } else {\r\n      this.setOperation(value, \"update\");\r\n    }\r\n  }\r\n  renderButtons() {\r\n    return this.buttons.map((current, index) => {\r\n      return (\r\n        <Button\r\n          value={current.value}\r\n          key={index}\r\n          parentOnClick={() => this.handleOnClick(current.value)}\r\n        />\r\n      );\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Screen\r\n            value={this.state.history[this.state.history.length - 1].operation}\r\n          />\r\n        </div>\r\n        <div className=\"row \">{this.renderButtons()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport Navbar from \"./layout/Navbar\";\nimport Calculator from \"./Calculator\";\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}